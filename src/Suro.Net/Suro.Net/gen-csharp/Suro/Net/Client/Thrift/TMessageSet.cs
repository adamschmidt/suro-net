/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Suro.Net.Client.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TMessageSet : TBase
  {
    private string _app;
    private int _numMessages;
    private sbyte _compression;
    private long _crc;
    private byte[] _messages;

    public string App
    {
      get
      {
        return _app;
      }
      set
      {
        __isset.app = true;
        this._app = value;
      }
    }

    public int NumMessages
    {
      get
      {
        return _numMessages;
      }
      set
      {
        __isset.numMessages = true;
        this._numMessages = value;
      }
    }

    public sbyte Compression
    {
      get
      {
        return _compression;
      }
      set
      {
        __isset.compression = true;
        this._compression = value;
      }
    }

    public long Crc
    {
      get
      {
        return _crc;
      }
      set
      {
        __isset.crc = true;
        this._crc = value;
      }
    }

    public byte[] Messages
    {
      get
      {
        return _messages;
      }
      set
      {
        __isset.messages = true;
        this._messages = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool app;
      public bool numMessages;
      public bool compression;
      public bool crc;
      public bool messages;
    }

    public TMessageSet() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              App = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              NumMessages = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Compression = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Crc = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Messages = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TMessageSet");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (App != null && __isset.app) {
        field.Name = "app";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(App);
        oprot.WriteFieldEnd();
      }
      if (__isset.numMessages) {
        field.Name = "numMessages";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumMessages);
        oprot.WriteFieldEnd();
      }
      if (__isset.compression) {
        field.Name = "compression";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Compression);
        oprot.WriteFieldEnd();
      }
      if (__isset.crc) {
        field.Name = "crc";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Crc);
        oprot.WriteFieldEnd();
      }
      if (Messages != null && __isset.messages) {
        field.Name = "messages";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Messages);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TMessageSet(");
      sb.Append("App: ");
      sb.Append(App);
      sb.Append(",NumMessages: ");
      sb.Append(NumMessages);
      sb.Append(",Compression: ");
      sb.Append(Compression);
      sb.Append(",Crc: ");
      sb.Append(Crc);
      sb.Append(",Messages: ");
      sb.Append(Messages);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
